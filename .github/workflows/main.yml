name: TEST CI/CD

on:
  push:
    # branches:
    #   - dev
    #   - main
    #   - ci
  workflow_dispatch:

concurrency:
  group: "test-ci-cd"
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write

jobs:
  release:
    runs-on: ubuntu-latest
    # needs: 
    #   - build
    #   - test
    name: semantic-release
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: Login to docker
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u filippogurioli --password-stdin
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

  send-notification:
    runs-on: ubuntu-latest
    needs: 
      - release
      # - build
      # - test
    if: always()
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Extract Branch Name
        id: vars
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Capture New Version
        run: |
          NEW_VERSION=$(git describe --tags --abbrev=0)
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Get Commit Message
        id: commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV

      - name: Determine Pipeline Status
        id: status
        run: |
          if [[ "${{ needs.release.result }}" == "success" ]]; then # && "${{ needs.test.result }}" == "success" ]]; then
            if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then  
              echo "TITLE=# ✅New Release: ${{ env.NEW_VERSION }}" >> $GITHUB_ENV
            else
              echo "TITLE=# ✅Pipeline Passed: ${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
            fi
          elif [[ "${{ job.status }}" == "cancelled" ]]; then
            echo "TITLE=# ⚠️Pipeline Interrupted" >> $GITHUB_ENV
          else
            echo "TITLE=# ❌Pipeline Failed" >> $GITHUB_ENV
          fi

      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        with:
          args: |
            "${{ env.TITLE }}

            **Author**: ${{ github.actor }}
            **Commit**: `${{ env.COMMIT_MESSAGE }}`
            **Details**: [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_USERNAME: GitHub Actions
          DISCORD_AVATAR: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
